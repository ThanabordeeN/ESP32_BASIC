# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'IED.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(729, 555)
        MainWindow.setStyleSheet("background-color: rgb(31, 31, 31);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.Header = QtWidgets.QLabel(self.centralwidget)
        self.Header.setGeometry(QtCore.QRect(50, 40, 231, 51))
        self.Header.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.Header.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 22pt \"Open Sans Light\";background-color: rgb(60, 60, 60);\n"
"border-radius: 23px; /* Half of the button\'s height for a perfect circle */\n"
"")
        self.Header.setTextFormat(QtCore.Qt.RichText)
        self.Header.setAlignment(QtCore.Qt.AlignCenter)
        self.Header.setWordWrap(False)
        self.Header.setIndent(0)
        self.Header.setObjectName("Header")
        self.STOP_BT = QtWidgets.QPushButton(self.centralwidget)
        self.STOP_BT.setGeometry(QtCore.QRect(570, 460, 101, 46))
        font = QtGui.QFont()
        font.setFamily("Open Sans Light")
        font.setPointSize(18)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.STOP_BT.setFont(font)
        self.STOP_BT.setStyleSheet("QPushButton {\n"
"                                        background-color: rgb(255, 0, 100);\n"
"                                        border-radius: 23px; /* Half of the button\'s height for a perfect circle */\n"
"font: 18pt \"Open Sans Light\";\n"
"    color: rgb(255, 255, 255);\n"
"                                    }\n"
"                                    QPushButton:hover {\n"
"                                        background-color: rgb(200, 0, 0); /* Optional: Change color on hover */\n"
"                                    }\n"
"                                    QPushButton:pressed {\n"
"                                        background-color: rgb(100, 0, 0); /* Optional: Change color on press */\n"
"                                    }")
        self.STOP_BT.setObjectName("STOP_BT")
        self.LOG_TEXT = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.LOG_TEXT.setGeometry(QtCore.QRect(50, 140, 621, 231))
        self.LOG_TEXT.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.LOG_TEXT.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(60, 60, 60);\n"
"border-radius: 15px;")
        self.LOG_TEXT.setTabStopDistance(80.0)
        self.LOG_TEXT.setObjectName("LOG_TEXT")
        self.LED_ON = QtWidgets.QPushButton(self.centralwidget)
        self.LED_ON.setGeometry(QtCore.QRect(50, 460, 151, 46))
        font = QtGui.QFont()
        font.setFamily("Open Sans Light")
        font.setPointSize(18)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.LED_ON.setFont(font)
        self.LED_ON.setStyleSheet("QPushButton {\n"
"                                        background-color: rgb(0, 255, 100);\n"
"                                        border-radius: 23px; /* Half of the button\'s height for a perfect circle */\n"
"                                        font: 18pt \"Open Sans Light\";\n"
"\n"
"                                    }\n"
"                                    QPushButton:hover {\n"
"                                        background-color: rgb(0, 150, 0); /* Optional: Change color on hover */\n"
"                                    }\n"
"                                    QPushButton:pressed {\n"
"                                        background-color: rgb(0, 100, 0); /* Optional: Change color on press */\n"
"                                    }")
        self.LED_ON.setObjectName("LED_ON")
        self.LED_COUNT_DOWN = QtWidgets.QPushButton(self.centralwidget)
        self.LED_COUNT_DOWN.setGeometry(QtCore.QRect(210, 460, 151, 46))
        self.LED_COUNT_DOWN.setStyleSheet("QPushButton {\n"
"                                        color: rgb(255, 255, 255);\n"
"                                        background-color: rgb(0, 100, 255);\n"
"                                        border-radius: 23px; /* Half of the button\'s height for a perfect circle */\n"
" font: 18pt \"Open Sans Light\";\n"
"    box-shadow: 10px 10px 10px rgba(0, 0, 0, 10); /* Adjust values for desired effect */\n"
"\n"
"                                    }\n"
"                                    QPushButton:hover {\n"
"                                        background-color: rgb(0, 0, 150); /* Optional: Change color on hover */\n"
"                                    }\n"
"                                    QPushButton:pressed {\n"
"                                        background-color: rgb(0, 0, 100); /* Optional: Change color on press */\n"
"                                    }")
        self.LED_COUNT_DOWN.setObjectName("LED_COUNT_DOWN")
        self.LED_SLIDER = QtWidgets.QSlider(self.centralwidget)
        self.LED_SLIDER.setGeometry(QtCore.QRect(50, 380, 531, 61))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.LED_SLIDER.sizePolicy().hasHeightForWidth())
        self.LED_SLIDER.setSizePolicy(sizePolicy)
        self.LED_SLIDER.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.LED_SLIDER.setStyleSheet("QSlider::groove:horizontal {\n"
"    border: 3px solid rgb(100, 100, 100);\n"
"    height: 6px;\n"
" border-radius: 6px;\n"
"}\n"
"\n"
"QSlider::handle:horizontal {\n"
"    background:rgb(100, 100, 100);\n"
"    width: 30px;\n"
"    height: 30px;\n"
"    margin: -15px -3px;\n"
"    border-radius: 15px;\n"
"    border: 3px solid rgb(100, 100, 100);\n"
"\n"
"}\n"
"\n"
"QSlider::add-page:horizontal {\n"
"    background: qlineargradient(x1:0, y1:0,\n"
"                x2:0, y2:1, stop:0 #1B1B1B, stop:1 #4c4c4c);\n"
"    height: 6px;\n"
" border-radius: 5px;\n"
"}\n"
"\n"
"QSlider::sub-page:horizontal {\n"
"    background: rgb(60, 60, 60);\n"
"    height: 6px;\n"
" border-radius: 5px;\n"
"}\n"
"\n"
"QSlider::handle:horizontal:hover {\n"
"    background: #007ad9;\n"
"    border-color: #007ad9;\n"
"}\n"
"\n"
"QSlider {\n"
"    background-color: rgb(43, 43, 43);\n"
"    height: 36px;  /* Adjust this value as needed for overall slider height */\n"
"}")
        self.LED_SLIDER.setMaximum(100)
        self.LED_SLIDER.setOrientation(QtCore.Qt.Horizontal)
        self.LED_SLIDER.setObjectName("LED_SLIDER")
        self.LED_PERCENT = QtWidgets.QLCDNumber(self.centralwidget)
        self.LED_PERCENT.setGeometry(QtCore.QRect(600, 380, 71, 61))
        self.LED_PERCENT.setStyleSheet("")
        self.LED_PERCENT.setObjectName("LED_PERCENT")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 20, 671, 91))
        self.label.setStyleSheet("background-color: rgb(43, 43, 43);\n"
"border-radius: 23px;")
        self.label.setText("")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(30, 120, 671, 411))
        self.label_2.setStyleSheet("background-color: rgb(43, 43, 43);\n"
"border-radius: 23px;")
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.status_heading = QtWidgets.QLabel(self.centralwidget)
        self.status_heading.setGeometry(QtCore.QRect(481, 40, 201, 51))
        self.status_heading.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 16pt \"Open Sans Light\";border-radius: 23px; /* Half of the button\'s height for a perfect circle */\n"
"background-color: rgb(60, 60, 60);\n"
"")
        self.status_heading.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.status_heading.setObjectName("status_heading")
        self.STATUS = QtWidgets.QLabel(self.centralwidget)
        self.STATUS.setGeometry(QtCore.QRect(580, 40, 101, 51))
        font = QtGui.QFont()
        font.setFamily("Open Sans SemiBold")
        font.setPointSize(16)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.STATUS.setFont(font)
        self.STATUS.setStyleSheet("font:75 16pt \"Open Sans SemiBold\";\n"
"color: rgb(255, 255, 255);\n"
"                                        border-radius: 23px; /* Half of the button\'s height for a perfect circle */\n"
"background-color: rgb(60, 60, 60);\n"
"")
        self.STATUS.setAlignment(QtCore.Qt.AlignCenter)
        self.STATUS.setObjectName("STATUS")
        self.TASK = QtWidgets.QLabel(self.centralwidget)
        self.TASK.setGeometry(QtCore.QRect(375, 40, 91, 51))
        font = QtGui.QFont()
        font.setFamily("Open Sans SemiBold")
        font.setPointSize(16)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.TASK.setFont(font)
        self.TASK.setStyleSheet("                                        font: 16pt \"Open Sans SemiBold\";\n"
"\n"
"color: rgb(255, 255, 255);\n"
" border-radius: 23px; background-color: rgb(60, 60, 60);\n"
"")
        self.TASK.setAlignment(QtCore.Qt.AlignCenter)
        self.TASK.setObjectName("TASK")
        self.task_label = QtWidgets.QLabel(self.centralwidget)
        self.task_label.setGeometry(QtCore.QRect(310, 40, 151, 51))
        self.task_label.setStyleSheet("                                        border-radius: 23px; /* Half of the button\'s height for a perfect circle */\n"
"color: rgb(255, 255, 255); font: 16pt \"Open Sans Light\";\n"
"background-color: rgb(60, 60, 60);\n"
"")
        self.task_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.task_label.setObjectName("task_label")
        self.label_2.raise_()
        self.label.raise_()
        self.Header.raise_()
        self.STOP_BT.raise_()
        self.LOG_TEXT.raise_()
        self.LED_ON.raise_()
        self.LED_COUNT_DOWN.raise_()
        self.LED_SLIDER.raise_()
        self.LED_PERCENT.raise_()
        self.status_heading.raise_()
        self.STATUS.raise_()
        self.task_label.raise_()
        self.TASK.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.LED_SLIDER.valueChanged['int'].connect(self.LED_PERCENT.display) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Header.setText(_translate("MainWindow", "Dynamic Signal"))
        self.STOP_BT.setText(_translate("MainWindow", "STOP"))
        self.LOG_TEXT.setPlainText(_translate("MainWindow", "SENT: LED100, TIMESTAMP: 2022-09-50 09:50:22, DATE: 2567-09-08\n"
"SENT: CD100, TIMESTAMP: 2022-09-50 09:55:58, DATE: 2567-09-08\n"
"SENT: STOP, TIMESTAMP: 2022-09-50 09:58:00, DATE: 2567-09-08\n"
"\n"
"\n"
""))
        self.LED_ON.setText(_translate("MainWindow", "LED ON"))
        self.LED_COUNT_DOWN.setText(_translate("MainWindow", "LED CD"))
        self.status_heading.setText(_translate("MainWindow", "   STATUS:"))
        self.STATUS.setText(_translate("MainWindow", "LED ON"))
        self.TASK.setText(_translate("MainWindow", "SENT"))
        self.task_label.setText(_translate("MainWindow", "  TASK :"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
